swagger: "2.0"
info:
  description: "API Documentation for Users/Tasks"
  version: "1.0.0"
  title: "Users/Task API"
  termsOfService: "http://swagger.io/terms/"
  contact:
    email: "apiteam@swagger.io"
  license:
    name: "Apache 2.0"
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"
host: "nsc-fun-dev-usw2-thursday.azurewebsites.net"

schemes:
- "https"
- "http"
paths:
  /users:
    get:
      tags:
      - "users"
      summary: "Get list of all users"
      description: ""
      operationId: "getUsers"
      produces:
      - "application/xml"
      - "application/json"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/User"
        "500":
          description: "Internal server error"
    post:
      tags:
      - "users"
      summary: "Add a new user to the database"
      description: ""
      operationId: "addUser"
      consumes:
      - "application/json"
      - "application/xml"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "User object that will be submitted to create new user"
        required: true
        schema:
          $ref: "#/definitions/User"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/User"
        "500":
          description: "Internal server error"

  /users/{user_id}:
    get:
      tags:
      - "users/{user_id}"
      summary: "Get user by user_id"
      description: ""
      operationId: "getUserByName"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "user_id"
        in: "path"
        description: "The name that needs to be fetched. Use user1 for testing. "
        required: true
        type: "string"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/User"
        "404":
          description: "User not found"
        "500":
          description: "Internal Server Error"
    put:
      tags:
      - "users/{user_id}"
      summary: "Updated user"
      description: "This can only be done by the logged in user."
      operationId: "updateUser"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "user_id"
        in: "path"
        description: "name that need to be updated"
        required: true
        type: "string"
      - in: "body"
        name: "body"
        description: "Updated user object"
        required: true
        schema:
          $ref: "#/definitions/User"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/User"
        "404":
          description: "User not found"
        "500":
          description: "Internal Server Error"
    delete:
      tags:
      - "users/{user_id}"
      summary: "Delete user"
      description: "This can only be done by the logged in user."
      operationId: "deleteUser"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "user_id"
        in: "path"
        description: "The name that needs to be deleted"
        required: true
        type: "string"
      responses:
        "200":
          description: "User Deleted"
        "400":
          description: "Delete Failed"
  /users/{user_id}/tasks:
    get:
      tags:
      - "/users/{user_id}/tasks"
      summary: "Get all users"
      description: ""
      parameters:
      - in: "path"
        name: "user_id"
        description: "The user that needs to be fetched. Use user1 for testing. "
        required: true
        type: 'integer'
      operationId: "getTasks"
      produces:
      - "application/xml"
      - "application/json"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/Task"
        "400":
          description: "Invalid username supplied"
        "404":
          description: "User not found"
    post:
      tags:
      - "/users/{user_id}/tasks"
      summary: "Add a new task to the database"
      description: ""
      operationId: "addTask"
      consumes:
      - "application/json"
      - "application/xml"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - in: "path"
        name: "user_id"
        description: "The user that needs to be fetched. Use user1 for testing. "
        required: true
        type: 'integer'
      - in: "body"
        name: "body"
        description: "Task object that needs to be added to the store"
        required: true
        schema:
          $ref: "#/definitions/Task"
      responses:
        "405":
          description: "Invalid input"
    
  /users/{user_id}/tasks/{task_id}:
    get:
      tags:
      - "users/{user_id}/tasks/{task_id}"
      summary: "Get a user's task by task_id"
      description: ""
      operationId: "getTaskByName"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "user_id"
        in: "path"
        description: "The name that needs to be fetched. Use user1 for testing. "
        required: true
        type: "integer"
      - name: "task_id"
        in: "path"
        description: "The task id that needs to be fetched. Use user1 for testing. "
        required: true
        type: "integer"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/User"
        "400":
          description: "Invalid username supplied"
        "404":
          description: "User not found"
    put:
      tags:
      - "users/{user_id}/tasks/{task_id}"
      summary: "Updated user"
      description: "This can only be done by the logged in user."
      operationId: "updateTask"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "user_id"
        in: "path"
        description: "name that need to be updated"
        required: true
        type: "string"
      - name: "task_id"
        in: "path"
        description: "The task id that needs to be fetched. Use user1 for testing. "
        required: true
        type: "integer"
      - in: "body"
        name: "body"
        description: "Updated user object"
        required: true
        schema:
          $ref: "#/definitions/User"
      responses:
        "400":
          description: "Invalid user supplied"
        "404":
          description: "User not found"
    delete:
      tags:
      - "users/{user_id}/tasks/{task_id}"
      summary: "Delete user"
      description: "This can only be done by the logged in user."
      operationId: "deleteTask"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "user_id"
        in: "path"
        description: "The name that needs to be deleted"
        required: true
        type: "string"
      - name: "task_id"
        in: "path"
        description: "The task id that needs to be fetched. Use user1 for testing. "
        required: true
        type: "integer"
      responses:
        "400":
          description: "Invalid username supplied"
        "404":
          description: "User not found"
definitions:
  Task:
    type: "object"
    properties:
      userId:
        type: "integer"
        format: "int64"
      user:
        type: "string"        
      taskId:
        type: "integer"
        format: "int64"
      description:
        type: "string"        
      quantity:
        type: "integer"
        format: "int32"
      createdDate:
        type: "string"
        format: "date-time"
      dueDate:
        type: "string"
        format: "date-time"
      completed:
        type: "integer"
        format: "int32"
      completedDate:
        type: "string"
        format: "date-time"
    xml:
      name: "Task"
      
  User:
    type: "object"
    properties:
      user_id:
        type: "integer"
        format: "int64"
      firstName:
        type: "string"
      lastName:
        type: "string"
      email:
        type: "string"
    xml:
      name: "User"
